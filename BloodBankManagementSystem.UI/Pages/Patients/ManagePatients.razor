@page "/managePatients"
@inject HttpClient Http
@inject IJSRuntime JSRuntime
@using BloodBankManagementSystem.Core.Models;

 @if(IsLoading){
        <LoaderComponent></LoaderComponent>
    }

<div class="d-flex justify-content-between align-items-center mb-3">
    <!-- Left Section: Title + Button -->
    <div class="d-flex align-items-center">
        <h4 class="me-3 mb-0">Registered Patients</h4>
        <button class="btn btn-success btn-sm" @onclick="OpenCreatePoup">Patient +</button>
    </div>

    <!-- Right Section: Filter + Export -->
    @* <div class="d-flex align-items-center gap-2 flex-wrap">
        <label for="filterDropdown" class="mb-0 me-2">Filter:</label>

        <InputSelect id="filterDropdown"
                    class="form-select"
                    style="width: 160px;"
                    @bind-Value="FilterBasedOn"
                    @bind-Value:after="ApplyFilteredPatientsList">
            @foreach (var option in FilterOptions)
            {
                <option value="@option.Key">@option.Value</option>
            }
        </InputSelect>
        <button class="btn btn-primary btn-sm" @onclick="ExportPatientsToExcel">Export to Excel</button>
    </div> *@



    <div class="d-flex align-items-center gap-2 flex-wrap">
        <label for="PatientFilterDropDown" class="form-label mb-0 me-2">Filter:</label>
        <RadzenDropDown
            Name="PatientFilterDropDown"
            Style="width: 160px;"
            TValue="string"
            @bind-Value="FilterBasedOn"
            Data="@FilterOptions.ToList()"
            TextProperty="Value"
            ValueProperty="Key"
            Change="@(args => ApplyFilteredPatientsList())" />
            <button class="btn customButton btn-sm" @onclick="ExportPatientsToExcel" title="Export to Excel">
                <i class="fas fa-file-excel"></i> Excel
            </button>
            <button class="btn customButton btn-sm" @onclick="ExportPatientsToExcel" title="Export to CSV">
                <i class="fas fa-file-csv"></i> CSV
            </button>

    </div>
</div>

@if (FilteredPatientsList is null)
{
    <p>Loading patients...</p>
}
else if (!FilteredPatientsList.Any())
{
    <p>No patients found.</p>
}
else
{
    <!-- Wrap the grid in a scrollable container -->
    <div style="overflow-x: auto; width: 100%;">
    <RadzenDataGrid TItem="Patient"
                    Data="@FilteredPatientsList"
                    Count="@FilteredPatientsList.Count"
                    AllowPaging="true"
                    PageSize="10"
                    AllowSorting="true"
                    AllowFiltering="true"
                    AllowColumnReorder="true"
                    RowSelect="@OnRowSelect"
                    FrozenColumns="FrozenColumns.Right"
                    Class="w-100"
                    Style="min-width: 800px;">
        <Columns>
            <RadzenDataGridColumn TItem="Patient" Property="FirstName" Title="First Name" Width="160px" />
            <RadzenDataGridColumn TItem="Patient" Property="LastName" Title="Last Name" Width="160px" />
            <RadzenDataGridColumn TItem="Patient" Property="BloodTypeNeeded" Title="Blood Type Needed" Width="160px" />
            <RadzenDataGridColumn TItem="Patient" Property="PhoneNumber" Title="Phone Number" Width="160px" />
            <RadzenDataGridColumn TItem="Patient" Property="Country" Title="Country" Width="160px" />
            <RadzenDataGridColumn TItem="Patient" Property="State" Title="State" Width="160px" />
            <RadzenDataGridColumn TItem="Patient" Property="District" Title="District" Width="160px" />
            <RadzenDataGridColumn TItem="Patient" Property="PinCode" Title="PinCode" Width="160px" />
            <RadzenDataGridColumn TItem="Patient" Property="Address" Title="Full Address" Width="300px" />

            <RadzenDataGridColumn TItem="Patient"
                                  Title="Actions"
                                  Filterable="false"
                                  Sortable="false"
                                  Frozen="true"
                                  Width="180px">
                <Template Context="patient">
                    <div class="d-flex gap-1 flex-nowrap">
                        <RadzenButton ButtonStyle="ButtonStyle.Light" Click="@(() => ShowPatientHistory(patient))">
                            <HistoryIcon></HistoryIcon>
                        </RadzenButton>
                        <RadzenButton ButtonStyle="ButtonStyle.Light"  Click="@(() => OpenEditModal(patient))">
                            <EditViewIcon></EditViewIcon>
                        </RadzenButton>
                        <RadzenButton ButtonStyle="ButtonStyle.Light" Icon="delete" Click="@(() => DeletePatient(patient.PatientID))" />
                    </div>
                </Template>
            </RadzenDataGridColumn>
        </Columns>
    </RadzenDataGrid>
</div>

}

<!-- Create & Update Popup -->
@if (IsCreateUpdatePopup)
{
    <div class="modal-overlay">
        <div class="modal-content">
            <RegisterPatient SelectedPatientData="SelectedPatient"
                             OnClose="HandleCancelOrClose"
                             OnPatientUpdated="RefreshPatientList"
                             IsCreateUpdatePatientPopup="IsCreateUpdatePopup" />
        </div>
    </div>
}

<!-- History Popup -->
@if (ShowHistoryPopup)
{
    <div class="modal-overlay">
        <div class="modal-content">
            <PatientHistoryComponent Patient="SelectedPatient"
                                     SelectedPatientId="SelectedPatient.PatientID"
                                     OnClose="CloseHistoryPopup" />
        </div>
    </div>
}
