@page "/user/register"
@inject HttpClient Http
@inject IJSRuntime JSRuntime
@* @using Microsoft.AspNetCore.Authorization; *@
@* @attribute [Authorize] *@
@if (IsLoading)
{
     <LoaderComponent></LoaderComponent>
}
@if(IsCreateUpdateUserPopup)
{
    <div class="position-relative">
        <button type="button" class="btn-close position-absolute top-0 end-0 m-2" aria-label="Close" @onclick="HandleCancelOrClose"></button>
    </div>
}
<h5>@RegisterUpdateTitle</h5>

@if (!string.IsNullOrEmpty(Message))
{
    <p class="alert alert-info">@Message</p>
}
<EditForm Model="UserModel" OnValidSubmit="HandleSubmit">
    <DataAnnotationsValidator />
    @* <ValidationSummary /> *@
    <div class="row">
        <!-- Left Column -->
        <div class="col-md-6">
            <div class="mb-3">
                <label class="form-label">First Name:</label>
                <InputText class="form-control" @bind-Value="UserModel.FirstName" tabindex="1" />
                <ValidationMessageComponent For="@(() => UserModel.FirstName)" />
            </div>

            <div class="mb-3">
                <label class="form-label">Email:</label>
                <InputText class="form-control" type="email" @bind-Value="UserModel.Email" tabindex="3" />
                <ValidationMessageComponent For="@(() => UserModel.Email)" />
            </div>

            @if(!IsVisible)
            {
                <div class="mb-3">
                    <label class="form-label">Password:</label>
                    <InputText class="form-control" type="password" @bind-Value="UserModel.PasswordHash" tabindex="5" />
                    @* <ValidationMessageComponent For="@(() => UserModel.PasswordHash)" /> *@
               </div>
            }
            

            <div class="mb-3">
                <label class="form-label">Role:</label>
                <InputSelect class="form-control" @bind-Value="UserModel.Role" tabindex="7">
                    @foreach (var role in RolesList)
                    {
                        <option value="@role">@role</option>
                    }
                </InputSelect>
                @* <ValidationMessageComponent For="@(() => UserModel.Role)" /> *@
            </div>
        </div>

        <!-- Right Column -->
        <div class="col-md-6">
            <div class="mb-3">
                <label class="form-label">Last Name:</label>
                <InputText class="form-control" @bind-Value="UserModel.LastName" tabindex="2" />
                <ValidationMessageComponent For="@(() => UserModel.LastName)" />
            </div>

             <div class="mb-3">
                <label class="form-label">Phone Number:</label>
                <InputText class="form-control" @bind-Value="UserModel.Phone" tabindex="4" />
                <ValidationMessageComponent For="@(() => UserModel.Phone)" />
            </div>

            @if(!IsVisible){
                <div class="mb-3">
                    <label class="form-label">Confirm Password:</label>
                    <InputText class="form-control" type="password" @bind-Value="ConfirmPassword" tabindex="6" />
                    @* <ValidationMessageComponent For="@(() => ConfirmPassword)" /> *@
                </div>
            }
            <div class="mb-3">
                <label class="form-label">Full Address:</label>
                <InputText class="form-control" type="text" @bind-Value="UserModel.Address" tabindex="8" />
                <ValidationMessageComponent For="@(() => UserModel.Address)" />
            </div>
        </div>
    </div>
    <div class="d-flex justify-content-center gap-3 mt-2">
        <button type="submit" class="btn btn-primary" tabindex="8">@SaveButtonTitle <i class="fa fa-save"></i> </button>
        <button type="button" class="btn btn-secondary" tabindex="9" @onclick="HandleClearReset">@ClearResetTitle <i class="fa fa-undo"></i></button>
    </div>
</EditForm>