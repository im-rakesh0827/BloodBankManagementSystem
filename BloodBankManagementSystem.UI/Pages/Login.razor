@page "/login"
@using Blazored.LocalStorage
@inject HttpClient Http
@inject ILocalStorageService LocalStorage
@inject JwtAuthStateProvider AuthProvider
@inject NavigationManager Navigation
@using BloodBankManagementSystem.UI.Services;
@using BloodBankManagementSystem.Core.Models;
<h3>Login</h3>

<EditForm Model="loginModel" OnValidSubmit="HandleLogin">
    <InputText @bind-Value="loginModel.Email" placeholder="Email" />
    <InputText @bind-Value="loginModel.Password" type="password" placeholder="Password" />
    <button type="submit">Login</button>
</EditForm>

@if (!string.IsNullOrEmpty(ErrorMessage))
{
    <div class="text-danger">@ErrorMessage</div>
}


@code {
    private LoginModel loginModel = new();
    private string ErrorMessage{get; set;} = string.Empty;

    private async Task HandleLogin()
{
    try
    {
        var response = await Http.PostAsJsonAsync("api/auth/login", loginModel);

        if (response.IsSuccessStatusCode)
        {
            var result = await response.Content.ReadFromJsonAsync<TokenResponse>();

            if (result != null && !string.IsNullOrWhiteSpace(result.Token))
            {
                await LocalStorage.SetItemAsync("authToken", result.Token);
                AuthProvider.NotifyUserAuthentication(result.Token);
                Navigation.NavigateTo("/");
            }
            else
            {
                ErrorMessage = "Login failed: Invalid token received.";
            }
        }
        else
        {
            ErrorMessage = "Login failed: Invalid email or password.";
        }
    }
    catch (Exception ex)
    {
        Console.WriteLine("Login exception: " + ex.Message);
        ErrorMessage = "An unexpected error occurred during login.";
    }
}



    

    
}
