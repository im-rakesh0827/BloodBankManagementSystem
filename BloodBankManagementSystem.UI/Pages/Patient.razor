@page "/patient"

<!DOCTYPE html>
<html lang="en">

<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Blood Donation</title>
    <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.0.0/css/all.min.css"
        integrity="sha512-9usAa10IRO0HhonpyAIVpjrylPvoDwiPUiKdWk5t3PyolY1cOd4DSE0Ga+ri4AuTroPR5aQvXU9xC6qOPnzFeg=="
        crossorigin="anonymous" referrerpolicy="no-referrer" />
    <style>
        :root {
            --wires-color: #ccc;
            --human-color: #666;
            --blood-color: #b51e23;
            --transition-time: 1s;
            --global-background: #f7f7f7;
        }

        body {
            overflow-y: hidden;
            background: var(--global-background);
            font-family: "Montserrat", sans-serif;
        }

        #about {
            position: absolute;
            top: 10px;
            left: 10px;
            z-index: 2;
        }

        #about .mySocial a {
            display: inline-block;
            height: 2.5em;
            margin: 0 5px;
        }

        #about .mySocial a i {
            font-size: 1.5em;
        }

        #about .mySocial a i.fa-linkedin {
            color: #0073b0;
        }

        #about .mySocial a i.fa-github,
        #about .mySocial a i.fa-globe {
            color: #24292e;
        }

        #about .mySocial a i.fa-twitter {
            color: #1da1f2;
        }

        #content {
            position: relative;
            margin: 50px auto;
            width: 600px;
            height: 600px;
        }

        #content h3 {
            position: absolute;
            top: 0;
            left: 0;
        }

        #blood_selector {
            display: grid;
            grid-template-columns: repeat(4, 1fr);
            grid-template-rows: 1fr 1fr;
            gap: 5px;
            width: 200px;
            height: 100px;
            position: absolute;
            left: 10px;
            top: 45px;
            z-index: 2;
        }

        #blood_selector div {
            user-select: none;
            display: flex;
            align-items: center;
            justify-content: center;
            background-color: var(--global-background);
            border: 1px solid var(--blood-color);
            border-radius: 25%;
            cursor: pointer;
        }

        #blood_selector div:hover {
            border-color: #1da1f2;
            font-weight: bold;
        }

        #blood_content {
            position: absolute;
            top: 50px;
            width: 100%;
            height: 100%;
        }

        .bar {
            position: fixed;
            right: 0;
            top: 55px;
            width: 55%;
            height: 8px;
            border-radius: 2px 0 0 2px;
            background-color: var(--wires-color);
        }

        .main_bag {
            position: absolute;
            width: 100px;
            height: 140px;
            top: 70px;
            left: 250px;
            border-radius: 30px;
            opacity: 0.8;
            background-color: rgba(154, 207, 234, 0.9);
            border: 8px solid rgba(154, 207, 234, 0.9);
        }

        .main_bag::before {
            content: "";
            position: absolute;
            top: -118px;
            left: 45%;
            width: 10%;
            height: 110px;
            background-color: var(--wires-color);
        }

        .main_bag .blood {
            position: absolute;
            left: 0;
            bottom: 0;
            width: 100%;
            height: 100px;
            background-color: var(--blood-color);
            border-radius: 0 0 35px 35px;
            transition: height var(--transition-time);
        }

        .main_bag .blood::before {
            content: "";
            position: absolute;
            top: -6px;
            width: 100%;
            height: 10px;
            background-color: #92191b;
            border-radius: 100%;
        }

        #center_via_c {
            position: absolute;
            z-index: 1;
            width: 100%;
            height: 100%;
        }

        #center_via_c .center_via {
            width: 8px;
            background: var(--wires-color);
            height: 200px;
            position: absolute;
            left: 304px;
            top: 276px;
        }

        #center_via_c .blood_via {
            height: 0;
            background-color: var(--blood-color);
            right: 50%;
            width: 8px;
            transition: height calc(var(--transition-time) / 4);
        }

        #humans {
            position: absolute;
            top: 276px;
            width: 400px;
            height: 200px;
            left: 108px;
            display: grid;
            grid-template-columns: 1fr 1fr;
            grid-template-rows: repeat(4, 1fr);
            gap: 0;
        }

        #humans .human {
            position: relative;
        }

        #humans .human .via {
            position: absolute;
            text-align: right;
            width: 100%;
            height: 8px;
            background-color: var(--wires-color);
            bottom: 0;
        }

        #humans .human .blood_via {
            position: absolute;
            height: 8px;
            background-color: var(--blood-color);
            width: 0;
            bottom: 0;
            transition: width var(--transition-time);
        }

        #humans .human.left {
            display: grid;
            justify-content: left;
            align-content: center;
        }

        #humans .human.left .blood_via {
            right: 0;
        }

        #humans .human.left .scribble {
            left: -30px;
        }

        #humans .human.left .scribble span {
            left: -40px;
            text-align: right;
        }

        #humans .human.right {
            display: grid;
            justify-content: right;
            align-content: center;
        }

        #humans .human.right .scribble {
            right: -60px;
        }

        #humans .human.right .scribble span {
            right: -10px;
        }

        #humans .human .scribble {
            position: absolute;
            height: 50px;
            width: 50px;
            top: 0;
            transition: background var(--transition-time);
        }

        #humans .human .scribble span {
            position: absolute;
            display: grid;
            align-items: flex-end;
            height: 100%;
        }

        #humans .human .scribble .head {
            width: 30%;
            height: 30%;
            background-color: var(--human-color);
        }

        /* ... (Your CSS code from previous response goes here) ... */
    </style>
</head>

<body>

    <div id="content">
        @* <h3>Select the donor blood type:</h3> *@
        <div id="blood_selector"></div>
        <div id="blood_content">
            <div class="bar" hidden></div>
            <div class="main_bag">
                <div class="blood"></div>
            </div>
        </div>
        <div id="center_via_c">
            <div class="center_via">
                <div class="blood_via"></div>
            </div>
        </div>
        <div id="humans"></div>
    </div>

    <script>
        const humans_parent = document.getElementById("humans");
        const BLOOD_TYPES = {
            "O−": ["O−", "O+", "A−", "A+", "B−", "B+", "AB−", "AB+"],
            "O+": ["O+", "A+", "B+", "AB+"],
            "A−": ["A−", "A+", "AB−", "AB+"],
            "A+": ["A+", "AB+"],
            "B−": ["B−", "B+", "AB−", "AB+"],
            "B+": ["B+", "AB+"],
            "AB−": ["AB−", "AB+"],
            "AB+": ["AB+"]
        };
        const selector = document.getElementById("blood_selector");
        const blood_bag = document.querySelector("#blood_content .main_bag .blood");
        const center_via = document.querySelector("#center_via_c .center_via .blood_via");
        let lastCalled;

        // Create blood type selectors dynamically
        for (const type of Object.keys(BLOOD_TYPES)) {
            const typeDiv = document.createElement('div');
            typeDiv.textContent = type;
            typeDiv.addEventListener('click', setRecipents); // Attach listener here
            selector.appendChild(typeDiv);
        }

        // Create human representations dynamically
        for (const type of Object.keys(BLOOD_TYPES)) {
            const humanDiv = document.createElement('div');
            humanDiv.classList.add('human');
            if (Object.keys(BLOOD_TYPES).indexOf(type) % 2 === 0) {
                humanDiv.classList.add('left');
            } else {
                humanDiv.classList.add('right');
            }
            humanDiv.innerHTML = `
            <div class="scribble">
                <span class="blood_type">${type}</span>
                <div class="head"></div>
                <div class="body"></div>
            </div>
            <div class="via"></div>
            <div class="blood_via"></div>
        `;
            humans_parent.appendChild(humanDiv);
        }

        const blood_vias = document.querySelectorAll("#humans .human .blood_via"); // Get after dynamic creation
        const blood_types = document.querySelectorAll(".blood_type");

        function reset() {
            if (lastCalled) lastCalled.target.classList.remove("highlight");
            blood_bag.style.height = "100px";
            center_via.style.height = "0";
            blood_vias.forEach(via => via.style.width = "0");
            blood_types.forEach(type => type.classList.remove("highlightText"));
        }

        function timeout(ms) {
            return new Promise(resolve => setTimeout(resolve, ms));
        }

        async function setRecipents(e) {
            if (lastCalled) lastCalled.target.classList.remove("highlight"); // Remove previous highlight
            e.target.classList.add("highlight");
            lastCalled = e;

            const donor = e.target.textContent;
            reset(); // Reset before showing new recipients

            for (const recipient of BLOOD_TYPES[donor]) {
                const recipientIndex = Object.keys(BLOOD_TYPES).indexOf(recipient);
                const height = 50 + 50 * Math.floor(recipientIndex / 2);
                const bloodHeight = 125 - 25 * Math.floor(recipientIndex / 2);

                blood_bag.style.height = `${bloodHeight}px`;
                center_via.style.height = `${height}px`;

                await timeout(100);
                blood_vias[recipientIndex].style.width = "100%";
                blood_types[recipientIndex].classList.add("highlightText");
            }
        }

        // Add event listener to the reset button (if you have one)
        const resetButton = document.getElementById('reset');  // Make sure you have a reset button in your HTML
        if (resetButton) {
            resetButton.addEventListener('click', reset);
        }

    </script>

</body>

</html>